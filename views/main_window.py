from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                            QPushButton, QLabel, QTableWidget, QTableWidgetItem,
                            QMessageBox, QLineEdit, QComboBox, QTabWidget, QSplitter, QTextEdit)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QColor
from .dialogs import ConnectionDialog, CredentialsDialog, NomenclatureDialog
import logging
import datetime
import json
from models.models import Extension, Nomenclature, EmissionType, Country

logger = logging.getLogger(__name__)

class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
    add_order_signal = pyqtSignal(str, str)
    ping_signal = pyqtSignal()
    get_orders_signal = pyqtSignal()
    get_report_signal = pyqtSignal()
    get_version_signal = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Ä—Å–∏–∏ –°–£–ó –∏ API
    get_orders_status_signal = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
    create_emission_order_signal = pyqtSignal(dict)  # –°–∏–≥–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —ç–º–∏—Å—Å–∏—é –∫–æ–¥–æ–≤
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
    add_connection_signal = pyqtSignal(str, str)
    edit_connection_signal = pyqtSignal(int, str, str)
    delete_connection_signal = pyqtSignal(int)
    set_active_connection_signal = pyqtSignal(int)
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    add_credentials_signal = pyqtSignal(str, str, int)
    edit_credentials_signal = pyqtSignal(int, str, str)
    delete_credentials_signal = pyqtSignal(int)
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π
    add_nomenclature_signal = pyqtSignal(str, str, str)
    edit_nomenclature_signal = pyqtSignal(int, str, str, str)
    delete_nomenclature_signal = pyqtSignal(int)
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ API
    set_active_extension_signal = pyqtSignal(int)
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏ API
    load_api_logs_signal = pyqtSignal()
    get_api_log_details_signal = pyqtSignal(int, object, object) # log_id, callback –¥–ª—è request, callback –¥–ª—è response
    export_api_descriptions_signal = pyqtSignal()  # –°–∏–≥–Ω–∞–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏–π API –≤ —Ñ–∞–π–ª
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    load_countries_signal = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
        self.setMinimumSize(800, 600)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ API
        self.create_status_bar()
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.create_orders_tab()
        self.create_connections_tab()
        self.create_credentials_tab()
        self.create_nomenclature_tab()
        self.create_extensions_tab()
        self.create_api_logs_tab()  # –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ API
        self.create_countries_tab()  # –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –≤–∏–¥–∂–µ—Ç
        self.tabs.addTab(self.orders_tab, "–ó–∞–∫–∞–∑—ã")
        self.tabs.addTab(self.connections_tab, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        self.tabs.addTab(self.credentials_tab, "–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        self.tabs.addTab(self.nomenclature_tab, "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞")
        self.tabs.addTab(self.extensions_tab, "–í–∏–¥—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
        self.tabs.addTab(self.api_logs_tab, "–õ–æ–≥–∏ API")
        self.tabs.addTab(self.countries_tab, "–°—Ç—Ä–∞–Ω—ã")
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        status_bar = self.statusBar()
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä API
        self.api_status_label = QLabel("API: ")
        self.api_indicator = QLabel("‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        self.api_indicator.setMinimumWidth(150)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        self.server_status_label = QLabel("–°–µ—Ä–≤–µ—Ä: ")
        self.server_indicator = QLabel("–ù–µ –≤—ã–±—Ä–∞–Ω")
        self.server_indicator.setMinimumWidth(250)
        
        status_bar.addWidget(self.api_status_label)
        status_bar.addWidget(self.api_indicator)
        status_bar.addWidget(self.server_status_label)
        status_bar.addWidget(self.server_indicator)
        status_bar.addPermanentWidget(QLabel(""))  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    
    def update_api_status(self, is_available):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ API"""
        if is_available:
            self.api_indicator.setText("üü¢ –î–æ—Å—Ç—É–ø–µ–Ω")
            self.api_indicator.setStyleSheet("color: green;")
        else:
            self.api_indicator.setText("üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            self.api_indicator.setStyleSheet("color: red;")
    
    def update_server_status(self, server_name, server_url):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Args:
            server_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
            server_url (str): URL —Å–µ—Ä–≤–µ—Ä–∞
        """
        if server_name and server_url:
            self.server_indicator.setText(f"{server_name} ({server_url})")
            self.server_indicator.setToolTip(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {server_name}\nURL: {server_url}")
        else:
            self.server_indicator.setText("–ù–µ –≤—ã–±—Ä–∞–Ω")
            self.server_indicator.setToolTip("–ê–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
    
    def create_api_logs_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤ API"""
        self.api_logs_tab = QWidget()
        layout = QVBoxLayout(self.api_logs_tab)
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –≤–∏–¥–∂–µ—Ç–∞ - –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
        splitter = QSplitter(Qt.Orientation.Vertical)
        logs_widget = QWidget()
        logs_layout = QVBoxLayout(logs_widget)
        
        details_widget = QWidget()
        details_layout = QVBoxLayout(details_widget)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ API
        self.api_logs_table = QTableWidget()
        self.api_logs_table.setColumnCount(7)
        self.api_logs_table.setHorizontalHeaderLabels(["ID", "–ú–µ—Ç–æ–¥", "URL", "–ö–æ–¥", "–£—Å–ø–µ—Ö", "–í—Ä–µ–º—è", "–û–ø–∏—Å–∞–Ω–∏–µ"])
        self.api_logs_table.itemSelectionChanged.connect(self.on_api_log_selected)
        logs_layout.addWidget(self.api_logs_table)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏ API
        buttons_layout = QHBoxLayout()
        
        refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏")
        refresh_button.clicked.connect(self.load_api_logs_signal.emit)
        buttons_layout.addWidget(refresh_button)
        
        export_descriptions_button = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç –æ–ø–∏—Å–∞–Ω–∏–π API")
        export_descriptions_button.clicked.connect(self.export_api_descriptions_signal.emit)
        buttons_layout.addWidget(export_descriptions_button)
        
        logs_layout.addLayout(buttons_layout)
        
        # –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
        details_layout.addWidget(QLabel("–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:"))
        self.request_details = QTextEdit()
        self.request_details.setReadOnly(True)
        details_layout.addWidget(self.request_details)
        
        details_layout.addWidget(QLabel("–î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:"))
        self.response_details = QTextEdit()
        self.response_details.setReadOnly(True)
        details_layout.addWidget(self.response_details)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter.addWidget(logs_widget)
        splitter.addWidget(details_widget)
        splitter.setSizes([400, 200])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –≤ –º–∞–∫–µ—Ç –≤–∫–ª–∞–¥–∫–∏
        layout.addWidget(splitter)
    
    def on_api_log_selected(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–≥–∞ API –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        selected_rows = self.api_logs_table.selectedItems()
        if selected_rows:
            row = selected_rows[0].row()
            log_id = int(self.api_logs_table.item(row, 0).text())
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–æ–≥–∞ API
            # –ü–µ—Ä–µ–¥–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.get_api_log_details_signal.emit(
                log_id, 
                lambda data: self.update_request_details(data), 
                lambda data: self.update_response_details(data)
            )
    
    def update_request_details(self, request_json):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            request_data = json.loads(request_json)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            request_formatted = ""
            if 'headers' in request_data and request_data['headers']:
                request_formatted += "–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:\n"
                for header, value in request_data['headers'].items():
                    request_formatted += f"{header}: {value}\n"
            
            if 'data' in request_data and request_data['data']:
                request_formatted += "\n–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:\n"
                request_formatted += json.dumps(request_data['data'], ensure_ascii=False, indent=4)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            self.request_details.setPlainText(request_formatted)
            
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            print(error_message)
            self.request_details.setPlainText(f"{error_message}\n\n–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{request_json}")
    
    def update_response_details(self, response_json):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–≤–µ—Ç–∞"""
        try:
            response_data = json.loads(response_json)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response_formatted = json.dumps(response_data, ensure_ascii=False, indent=4)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            self.response_details.setPlainText(response_formatted)
            
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {str(e)}"
            print(error_message)
            self.response_details.setPlainText(f"{error_message}\n\n–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{response_json}")
    
    def update_api_logs_table(self, logs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤ API"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        self.api_logs_table.setColumnCount(9)
        self.api_logs_table.setHorizontalHeaderLabels(["ID", "–ú–µ—Ç–æ–¥", "URL", "–ö–æ–¥", "–£—Å–ø–µ—Ö", "–í—Ä–µ–º—è", "–û–ø–∏—Å–∞–Ω–∏–µ", "request_data", "response_data"])
        
        self.api_logs_table.setRowCount(len(logs))
        for row, log in enumerate(logs):
            self.api_logs_table.setItem(row, 0, QTableWidgetItem(str(log["id"])))
            self.api_logs_table.setItem(row, 1, QTableWidgetItem(log["method"]))
            self.api_logs_table.setItem(row, 2, QTableWidgetItem(log["url"]))
            self.api_logs_table.setItem(row, 3, QTableWidgetItem(str(log["status_code"])))
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—Ö–∞
            success_item = QTableWidgetItem("‚úì" if log["success"] else "‚úó")
            success_item.setBackground(QColor(200, 255, 200) if log["success"] else QColor(255, 200, 200))
            self.api_logs_table.setItem(row, 4, success_item)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            timestamp = datetime.datetime.fromisoformat(log["timestamp"].replace("Z", "+00:00"))
            formatted_time = timestamp.strftime("%Y-%m-%d %H:%M:%S")
            self.api_logs_table.setItem(row, 5, QTableWidgetItem(formatted_time))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            description = log.get("description", "")
            self.api_logs_table.setItem(row, 6, QTableWidgetItem(description))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ —Å–∫—Ä—ã—Ç—ã—Ö —è—á–µ–π–∫–∞—Ö
            self.api_logs_table.setItem(row, 7, QTableWidgetItem(log["request"]))
            self.api_logs_table.setItem(row, 8, QTableWidgetItem(log["response"]))
        
        # –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
        self.api_logs_table.setColumnHidden(7, True)
        self.api_logs_table.setColumnHidden(8, True)
        
        # –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫
        self.api_logs_table.resizeColumnsToContents()
    
    def create_extensions_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤–∏–¥–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π API)"""
        self.extensions_tab = QWidget()
        layout = QVBoxLayout(self.extensions_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        self.extensions_table = QTableWidget()
        self.extensions_table.setColumnCount(4)
        self.extensions_table.setHorizontalHeaderLabels(["ID", "–ö–æ–¥", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ê–∫—Ç–∏–≤–Ω–æ"])
        layout.addWidget(self.extensions_table)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
        buttons_layout = QHBoxLayout()
        
        set_active_button = QPushButton("–°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º")
        set_active_button.clicked.connect(self.on_set_active_extension_clicked)
        buttons_layout.addWidget(set_active_button)
        
        layout.addLayout(buttons_layout)
    
    def on_set_active_extension_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è API"""
        row = self.extensions_table.currentRow()
        if row >= 0:
            extension_id = int(self.extensions_table.item(row, 0).text())
            self.set_active_extension_signal.emit(extension_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    
    def update_extensions_table(self, extensions):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π API"""
        self.extensions_table.setRowCount(len(extensions))
        for row, extension in enumerate(extensions):
            self.extensions_table.setItem(row, 0, QTableWidgetItem(str(extension.id)))
            self.extensions_table.setItem(row, 1, QTableWidgetItem(extension.code))
            self.extensions_table.setItem(row, 2, QTableWidgetItem(extension.name))
            self.extensions_table.setItem(row, 3, QTableWidgetItem("–î–∞" if extension.is_active else "–ù–µ—Ç"))
    
    def on_add_order_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        order_number = self.order_number_input.text()
        status = self.order_status_input.text()
        if order_number and status:
            self.add_order_signal.emit(order_number, status)
            self.order_number_input.clear()
            self.order_status_input.clear()
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
    
    def on_ping_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ API"""
        self.ping_signal.emit()
    
    def on_get_orders_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"""
        self.get_orders_signal.emit()
    
    def on_get_report_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
        self.get_report_signal.emit()
    
    def on_get_version_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –°–£–ó –∏ API"""
        self.get_version_signal.emit()
    
    def on_get_orders_status_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤"""
        self.get_orders_status_signal.emit()
    
    def on_add_connection_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        dialog = ConnectionDialog(self)
        if dialog.exec():
            data = dialog.get_data()
            self.add_connection_signal.emit(data['name'], data['url'])
    
    def on_edit_connection_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        row = self.connections_table.currentRow()
        if row >= 0:
            connection_id = int(self.connections_table.item(row, 0).text())
            name = self.connections_table.item(row, 1).text()
            url = self.connections_table.item(row, 2).text()
            
            dialog = ConnectionDialog(self)
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            dialog.name_input.setText(name)
            dialog.url_input.setText(url)
            
            if dialog.exec():
                data = dialog.get_data()
                self.edit_connection_signal.emit(connection_id, data['name'], data['url'])
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def on_delete_connection_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        row = self.connections_table.currentRow()
        if row >= 0:
            connection_id = int(self.connections_table.item(row, 0).text())
            self.delete_connection_signal.emit(connection_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    def on_set_active_connection_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        row = self.connections_table.currentRow()
        if row >= 0:
            connection_id = int(self.connections_table.item(row, 0).text())
            self.set_active_connection_signal.emit(connection_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    
    def on_add_credentials_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        dialog = CredentialsDialog(self)
        if dialog.exec():
            data = dialog.get_data()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            connection_id = None
            row = self.connections_table.currentRow()
            if row >= 0:
                connection_id = int(self.connections_table.item(row, 0).text())
            
            # –¢–µ–ø–µ—Ä—å connection_id –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            self.add_credentials_signal.emit(data['omsid'], data['token'], connection_id)
    
    def on_edit_credentials_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        row = self.credentials_table.currentRow()
        if row >= 0:
            credentials_id = int(self.credentials_table.item(row, 0).text())
            omsid = self.credentials_table.item(row, 2).text()
            token = self.credentials_table.item(row, 3).text()
            
            dialog = CredentialsDialog(self)
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            dialog.omsid_input.setText(omsid)
            dialog.token_input.setText(token)
            
            if dialog.exec():
                data = dialog.get_data()
                self.edit_credentials_signal.emit(credentials_id, data['omsid'], data['token'])
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def on_delete_credentials_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        row = self.credentials_table.currentRow()
        if row >= 0:
            credentials_id = int(self.credentials_table.item(row, 0).text())
            self.delete_credentials_signal.emit(credentials_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    def on_add_nomenclature_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π API –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–∏–∞–ª–æ–≥–∞
        extensions = []
        for row in range(self.extensions_table.rowCount()):
            extension_id = int(self.extensions_table.item(row, 0).text())
            extension_code = self.extensions_table.item(row, 1).text()
            extension_name = self.extensions_table.item(row, 2).text()
            is_active = self.extensions_table.item(row, 3).text() == "–î–∞"
            extensions.append(Extension(extension_id, extension_code, extension_name, is_active))
        
        dialog = NomenclatureDialog(self, extensions=extensions)
        if dialog.exec():
            data = dialog.get_data()
            self.add_nomenclature_signal.emit(data['name'], data['gtin'], data['product_group'])
    
    def on_edit_nomenclature_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"""
        row = self.nomenclature_table.currentRow()
        if row >= 0:
            nomenclature_id = int(self.nomenclature_table.item(row, 0).text())
            name = self.nomenclature_table.item(row, 1).text()
            gtin = self.nomenclature_table.item(row, 2).text()
            product_group = self.nomenclature_table.item(row, 3).text() if self.nomenclature_table.item(row, 3) else ""
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
            nomenclature = Nomenclature(nomenclature_id, name, gtin, product_group)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π API –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–∏–∞–ª–æ–≥–∞
            extensions = []
            for row in range(self.extensions_table.rowCount()):
                extension_id = int(self.extensions_table.item(row, 0).text())
                extension_code = self.extensions_table.item(row, 1).text()
                extension_name = self.extensions_table.item(row, 2).text()
                is_active = self.extensions_table.item(row, 3).text() == "–î–∞"
                extensions.append(Extension(extension_id, extension_code, extension_name, is_active))
            
            dialog = NomenclatureDialog(self, nomenclature=nomenclature, extensions=extensions)
            
            if dialog.exec():
                data = dialog.get_data()
                self.edit_nomenclature_signal.emit(nomenclature_id, data['name'], data['gtin'], data['product_group'])
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def on_delete_nomenclature_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"""
        row = self.nomenclature_table.currentRow()
        if row >= 0:
            nomenclature_id = int(self.nomenclature_table.item(row, 0).text())
            self.delete_nomenclature_signal.emit(nomenclature_id)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    def update_orders_table(self, orders):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤"""
        self.orders_table.setRowCount(len(orders))
        for row, order in enumerate(orders):
            self.orders_table.setItem(row, 0, QTableWidgetItem(str(order.id)))
            self.orders_table.setItem(row, 1, QTableWidgetItem(order.order_number))
            self.orders_table.setItem(row, 2, QTableWidgetItem(order.status))
            self.orders_table.setItem(row, 3, QTableWidgetItem(str(order.created_at)))
    
    def update_connections_table(self, connections):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        self.connections_table.setRowCount(len(connections))
        for row, connection in enumerate(connections):
            self.connections_table.setItem(row, 0, QTableWidgetItem(str(connection.id)))
            self.connections_table.setItem(row, 1, QTableWidgetItem(connection.name))
            self.connections_table.setItem(row, 2, QTableWidgetItem(connection.url))
            self.connections_table.setItem(row, 3, QTableWidgetItem("–î–∞" if connection.is_active else "–ù–µ—Ç"))
    
    def update_credentials_table(self, credentials):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.credentials_table.setRowCount(len(credentials))
        for row, cred in enumerate(credentials):
            self.credentials_table.setItem(row, 0, QTableWidgetItem(str(cred.id)))
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            connection_name = cred.connection.name if cred.connection else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            self.credentials_table.setItem(row, 1, QTableWidgetItem(connection_name))
            
            self.credentials_table.setItem(row, 2, QTableWidgetItem(cred.omsid))
            self.credentials_table.setItem(row, 3, QTableWidgetItem(cred.token))
    
    def update_nomenclature_table(self, nomenclature):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"""
        self.nomenclature_table.setRowCount(len(nomenclature))
        for row, item in enumerate(nomenclature):
            self.nomenclature_table.setItem(row, 0, QTableWidgetItem(str(item.id)))
            self.nomenclature_table.setItem(row, 1, QTableWidgetItem(item.name))
            self.nomenclature_table.setItem(row, 2, QTableWidgetItem(item.gtin))
            self.nomenclature_table.setItem(row, 3, QTableWidgetItem(item.product_group))
    
    def show_message(self, title, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        QMessageBox.information(self, title, message)

    def create_orders_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–∫–∞–∑–æ–≤"""
        self.orders_tab = QWidget()
        layout = QVBoxLayout(self.orders_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        self.orders_table = QTableWidget()
        self.orders_table.setColumnCount(4)
        self.orders_table.setHorizontalHeaderLabels(["ID", "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"])
        layout.addWidget(self.orders_table)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
        api_layout = QHBoxLayout()
        self.ping_button = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API")
        self.ping_button.clicked.connect(self.on_ping_clicked)
        self.get_orders_button = QPushButton("–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã")
        self.get_orders_button.clicked.connect(self.on_get_orders_clicked)
        self.get_report_button = QPushButton("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç")
        self.get_report_button.clicked.connect(self.on_get_report_clicked)
        self.get_version_button = QPushButton("–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –°–£–ó –∏ API")
        self.get_version_button.clicked.connect(self.on_get_version_clicked)
        self.get_orders_status_button = QPushButton("–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤")
        self.get_orders_status_button.clicked.connect(self.on_get_orders_status_clicked)
        self.create_emission_order_button = QPushButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —ç–º–∏—Å—Å–∏—é –ö–ú")
        self.create_emission_order_button.clicked.connect(self.on_create_emission_order_clicked)
        
        api_layout.addWidget(self.ping_button)
        api_layout.addWidget(self.get_orders_button)
        api_layout.addWidget(self.get_report_button)
        api_layout.addWidget(self.get_version_button)
        api_layout.addWidget(self.get_orders_status_button)
        api_layout.addWidget(self.create_emission_order_button)
        
        layout.addLayout(api_layout)

    def create_connections_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        self.connections_tab = QWidget()
        layout = QVBoxLayout(self.connections_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self.connections_table = QTableWidget()
        self.connections_table.setColumnCount(4)
        self.connections_table.setHorizontalHeaderLabels(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "URL", "–ê–∫—Ç–∏–≤–Ω–æ"])
        layout.addWidget(self.connections_table)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
        buttons_layout = QHBoxLayout()
        add_connection_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        add_connection_button.clicked.connect(self.on_add_connection_clicked)
        buttons_layout.addWidget(add_connection_button)
        
        edit_connection_button = QPushButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        edit_connection_button.clicked.connect(self.on_edit_connection_clicked)
        buttons_layout.addWidget(edit_connection_button)
        
        delete_connection_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        delete_connection_button.clicked.connect(self.on_delete_connection_clicked)
        buttons_layout.addWidget(delete_connection_button)
        
        set_active_button = QPushButton("–°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º")
        set_active_button.clicked.connect(self.on_set_active_connection_clicked)
        buttons_layout.addWidget(set_active_button)
        
        layout.addLayout(buttons_layout)

    def create_credentials_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.credentials_tab = QWidget()
        layout = QVBoxLayout(self.credentials_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.credentials_table = QTableWidget()
        self.credentials_table.setColumnCount(4)
        self.credentials_table.setHorizontalHeaderLabels(["ID", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "OMSID", "Token"])
        layout.addWidget(self.credentials_table)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        buttons_layout = QHBoxLayout()
        add_credentials_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        add_credentials_button.clicked.connect(self.on_add_credentials_clicked)
        buttons_layout.addWidget(add_credentials_button)
        
        edit_credentials_button = QPushButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        edit_credentials_button.clicked.connect(self.on_edit_credentials_clicked)
        buttons_layout.addWidget(edit_credentials_button)
        
        delete_credentials_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        delete_credentials_button.clicked.connect(self.on_delete_credentials_clicked)
        buttons_layout.addWidget(delete_credentials_button)
        
        layout.addLayout(buttons_layout)

    def create_nomenclature_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"""
        self.nomenclature_tab = QWidget()
        layout = QVBoxLayout(self.nomenclature_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
        self.nomenclature_table = QTableWidget()
        self.nomenclature_table.setColumnCount(4)
        self.nomenclature_table.setHorizontalHeaderLabels(["ID", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "GTIN", "–¢–æ–≤–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞"])
        layout.addWidget(self.nomenclature_table)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π
        buttons_layout = QHBoxLayout()
        add_nomenclature_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É")
        add_nomenclature_button.clicked.connect(self.on_add_nomenclature_clicked)
        buttons_layout.addWidget(add_nomenclature_button)
        
        edit_nomenclature_button = QPushButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        edit_nomenclature_button.clicked.connect(self.on_edit_nomenclature_clicked)
        buttons_layout.addWidget(edit_nomenclature_button)
        
        delete_nomenclature_button = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        delete_nomenclature_button.clicked.connect(self.on_delete_nomenclature_clicked)
        buttons_layout.addWidget(delete_nomenclature_button)
        
        layout.addLayout(buttons_layout)

    def on_create_emission_order_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —ç–º–∏—Å—Å–∏—é –ö–ú"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from .dialogs import EmissionOrderDialog
        from models.models import EmissionType
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—ã –∏ —Å–ª–æ—Ç—ã
        # –í MainWindow –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ self.controller
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.load_api_logs_signal.emit()  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –≤–∏–¥–∂–µ—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
        nomenclatures = []
        extensions = []
        countries = []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        for row in range(self.nomenclature_table.rowCount()):
            id_item = self.nomenclature_table.item(row, 0)
            name_item = self.nomenclature_table.item(row, 1)
            gtin_item = self.nomenclature_table.item(row, 2)
            group_item = self.nomenclature_table.item(row, 3)
            
            if id_item and name_item and gtin_item:
                from models.models import Nomenclature
                nomenclature = Nomenclature(
                    int(id_item.text()),
                    name_item.text(),
                    gtin_item.text(),
                    group_item.text() if group_item else ""
                )
                nomenclatures.append(nomenclature)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è—Ö API –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        for row in range(self.extensions_table.rowCount()):
            id_item = self.extensions_table.item(row, 0)
            code_item = self.extensions_table.item(row, 1)
            name_item = self.extensions_table.item(row, 2)
            is_active_item = self.extensions_table.item(row, 3)
            
            if id_item and code_item and name_item and is_active_item:
                from models.models import Extension
                extension = Extension(
                    int(id_item.text()),
                    code_item.text(),
                    name_item.text(),
                    is_active_item.text() == "–î–∞"
                )
                extensions.append(extension)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–∞—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        for row in range(self.countries_table.rowCount()):
            id_item = self.countries_table.item(row, 0)
            code_item = self.countries_table.item(row, 1)
            name_item = self.countries_table.item(row, 2)
            
            if id_item and code_item and name_item:
                from models.models import Country
                country = Country(
                    int(id_item.text()),
                    code_item.text(),
                    name_item.text()
                )
                countries.append(country)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–∞—Ö —ç–º–∏—Å—Å–∏–∏ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        # –ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã —ç–º–∏—Å—Å–∏–∏ –≤—Ä—É—á–Ω—É—é
        emission_types = [
            EmissionType(1, "PRODUCTION", "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ", None),
            EmissionType(2, "IMPORT", "–í–≤–µ–∑–µ–Ω –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (–ò–º–ø–æ—Ä—Ç)", None),
            EmissionType(3, "REMAINS", "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤", "shoes"),
            EmissionType(4, "COMMISSION", "–ü—Ä–∏–Ω—è—Ç –Ω–∞ –∫–æ–º–º–∏—Å—Å–∏—é –æ—Ç —Ñ–∏–∑.–ª–∏—Ü–∞", "shoes"),
            EmissionType(5, "REMARK", "–ü–µ—Ä–µ–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞", None)
        ]
        
        dialog = EmissionOrderDialog(self, nomenclatures, extensions, emission_types, countries)
        if dialog.exec():
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
            order_data = dialog.get_data()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
            self.create_emission_order_signal.emit(order_data)

    def create_countries_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç—Ä–∞–Ω"""
        self.countries_tab = QWidget()
        layout = QVBoxLayout(self.countries_tab)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—Ä–∞–Ω
        self.countries_table = QTableWidget()
        self.countries_table.setColumnCount(3)
        self.countries_table.setHorizontalHeaderLabels(["ID", "–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã", "–ù–∞–∑–≤–∞–Ω–∏–µ"])
        layout.addWidget(self.countries_table)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω")
        refresh_button.clicked.connect(self.load_countries_signal.emit)
        layout.addWidget(refresh_button)
    
    def update_countries_table(self, countries):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç—Ä–∞–Ω"""
        self.countries_table.setRowCount(len(countries))
        for row, country in enumerate(countries):
            self.countries_table.setItem(row, 0, QTableWidgetItem(str(country.id)))
            self.countries_table.setItem(row, 1, QTableWidgetItem(country.code))
            self.countries_table.setItem(row, 2, QTableWidgetItem(country.name))
        self.countries_table.resizeColumnsToContents() 